// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Mimes = append(out.Mimes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.MinDuration = int(in.Int())
		case "maxduration":
			out.MaxDuration = int(in.Int())
		case "protocol":
			out.Protocol = int(in.Int())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]int, 0, 8)
					} else {
						out.Protocols = []int{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.Protocols = append(out.Protocols, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "w":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.W).UnmarshalJSON(data))
			}
		case "h":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.H).UnmarshalJSON(data))
			}
		case "startdelay":
			out.StartDelay = int(in.Int())
		case "linearity":
			out.Linearity = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.Battr = nil
			} else {
				in.Delim('[')
				if out.Battr == nil {
					if !in.IsDelim(']') {
						out.Battr = make([]int, 0, 8)
					} else {
						out.Battr = []int{}
					}
				} else {
					out.Battr = (out.Battr)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int
					v3 = int(in.Int())
					out.Battr = append(out.Battr, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtended = int(in.Int())
		case "minbitrate":
			out.MinBitrate = int(in.Int())
		case "maxbitrate":
			out.MaxBitrate = int(in.Int())
		case "boxingallowed":
			out.BoxingAllowed = int(in.Int())
		case "playbackmethod":
			if in.IsNull() {
				in.Skip()
				out.PlaybackMethod = nil
			} else {
				in.Delim('[')
				if out.PlaybackMethod == nil {
					if !in.IsDelim(']') {
						out.PlaybackMethod = make([]int, 0, 8)
					} else {
						out.PlaybackMethod = []int{}
					}
				} else {
					out.PlaybackMethod = (out.PlaybackMethod)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.PlaybackMethod = append(out.PlaybackMethod, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if out.Delivery == nil {
					if !in.IsDelim(']') {
						out.Delivery = make([]int, 0, 8)
					} else {
						out.Delivery = []int{}
					}
				} else {
					out.Delivery = (out.Delivery)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.Delivery = append(out.Delivery, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Pos = int(in.Int())
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAd = nil
			} else {
				in.Delim('[')
				if out.CompanionAd == nil {
					if !in.IsDelim(']') {
						out.CompanionAd = make([]Banner, 0, 1)
					} else {
						out.CompanionAd = []Banner{}
					}
				} else {
					out.CompanionAd = (out.CompanionAd)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Banner
					(v6).UnmarshalEasyJSON(in)
					out.CompanionAd = append(out.CompanionAd, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]int, 0, 8)
					} else {
						out.API = []int{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.API = append(out.API, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionType = nil
			} else {
				in.Delim('[')
				if out.CompanionType == nil {
					if !in.IsDelim(']') {
						out.CompanionType = make([]int, 0, 8)
					} else {
						out.CompanionType = []int{}
					}
				} else {
					out.CompanionType = (out.CompanionType)[:0]
				}
				for !in.IsDelim(']') {
					var v8 int
					v8 = int(in.Int())
					out.CompanionType = append(out.CompanionType, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Mimes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mimes\":")
		if in.Mimes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Mimes {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"minduration\":")
		out.Int(int(in.MinDuration))
	}
	if in.MaxDuration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxduration\":")
		out.Int(int(in.MaxDuration))
	}
	if in.Protocol != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"protocol\":")
		out.Int(int(in.Protocol))
	}
	if len(in.Protocols) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"protocols\":")
		if in.Protocols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Protocols {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Raw((in.W).MarshalJSON())
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Raw((in.H).MarshalJSON())
	}
	if in.StartDelay != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"startdelay\":")
		out.Int(int(in.StartDelay))
	}
	if in.Linearity != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"linearity\":")
		out.Int(int(in.Linearity))
	}
	if in.Sequence != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sequence\":")
		out.Int(int(in.Sequence))
	}
	if len(in.Battr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"battr\":")
		if in.Battr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Battr {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v14))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtended != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxextended\":")
		out.Int(int(in.MaxExtended))
	}
	if in.MinBitrate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"minbitrate\":")
		out.Int(int(in.MinBitrate))
	}
	if in.MaxBitrate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxbitrate\":")
		out.Int(int(in.MaxBitrate))
	}
	if in.BoxingAllowed != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"boxingallowed\":")
		out.Int(int(in.BoxingAllowed))
	}
	if len(in.PlaybackMethod) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"playbackmethod\":")
		if in.PlaybackMethod == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.PlaybackMethod {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.Delivery) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"delivery\":")
		if in.Delivery == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Delivery {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pos\":")
		out.Int(int(in.Pos))
	}
	if len(in.CompanionAd) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"companionad\":")
		if in.CompanionAd == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.CompanionAd {
				if v19 > 0 {
					out.RawByte(',')
				}
				(v20).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.API) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"api\":")
		if in.API == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.API {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v22))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionType) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"companiontype\":")
		if in.CompanionType == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.CompanionType {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Video) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Video) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Video) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Video) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "buyeruid":
			out.BuyerUID = string(in.String())
		case "yob":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.YOB).UnmarshalJSON(data))
			}
		case "gender":
			out.Gender = string(in.String())
		case "keywords":
			out.Keywords = string(in.String())
		case "customdata":
			out.CustomData = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				(*out.Geo).UnmarshalEasyJSON(in)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Data, 0, 1)
					} else {
						out.Data = []Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Data
					(v25).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			(out.Ext).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.BuyerUID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"buyeruid\":")
		out.String(string(in.BuyerUID))
	}
	if len(in.YOB) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"yob\":")
		out.Raw((in.YOB).MarshalJSON())
	}
	if in.Gender != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"gender\":")
		out.String(string(in.Gender))
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if in.CustomData != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customdata\":")
		out.String(string(in.CustomData))
	}
	if in.Geo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geo\":")
		if in.Geo == nil {
			out.RawString("null")
		} else {
			(*in.Geo).MarshalEasyJSON(out)
		}
	}
	if len(in.Data) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"data\":")
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Data {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		(in.Ext).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb1(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb2(in *jlexer.Lexer, out *Site) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "cat":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cat).UnmarshalJSON(data))
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if out.SectionCat == nil {
					if !in.IsDelim(']') {
						out.SectionCat = make([]string, 0, 4)
					} else {
						out.SectionCat = []string{}
					}
				} else {
					out.SectionCat = (out.SectionCat)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.SectionCat = append(out.SectionCat, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if out.PageCat == nil {
					if !in.IsDelim(']') {
						out.PageCat = make([]string, 0, 4)
					} else {
						out.PageCat = []string{}
					}
				} else {
					out.PageCat = (out.PageCat)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.PageCat = append(out.PageCat, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "search":
			out.Search = string(in.String())
		case "mobile":
			out.Mobile = int(in.Int())
		case "privacypolicy":
			out.PrivacyPolicy = int(in.Int())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				(*out.Publisher).UnmarshalEasyJSON(in)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				(*out.Content).UnmarshalEasyJSON(in)
			}
		case "keywords":
			out.Keywords = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb2(out *jwriter.Writer, in Site) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		out.Raw((in.Cat).MarshalJSON())
	}
	if len(in.SectionCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sectioncat\":")
		if in.SectionCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.SectionCat {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pagecat\":")
		if in.PageCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.PageCat {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Page != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"page\":")
		out.String(string(in.Page))
	}
	if in.Ref != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ref\":")
		out.String(string(in.Ref))
	}
	if in.Search != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"search\":")
		out.String(string(in.Search))
	}
	if in.Mobile != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mobile\":")
		out.Int(int(in.Mobile))
	}
	if in.PrivacyPolicy != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"privacypolicy\":")
		out.Int(int(in.PrivacyPolicy))
	}
	if in.Publisher != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"publisher\":")
		if in.Publisher == nil {
			out.RawString("null")
		} else {
			(*in.Publisher).MarshalEasyJSON(out)
		}
	}
	if in.Content != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"content\":")
		if in.Content == nil {
			out.RawString("null")
		} else {
			(*in.Content).MarshalEasyJSON(out)
		}
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Site) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Site) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Site) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Site) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb2(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb3(in *jlexer.Lexer, out *Segment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb3(out *jwriter.Writer, in Segment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Segment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Segment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Segment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Segment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb3(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb4(in *jlexer.Lexer, out *SeatBid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bid":
			if in.IsNull() {
				in.Skip()
				out.Bid = nil
			} else {
				in.Delim('[')
				if out.Bid == nil {
					if !in.IsDelim(']') {
						out.Bid = make([]Bid, 0, 1)
					} else {
						out.Bid = []Bid{}
					}
				} else {
					out.Bid = (out.Bid)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Bid
					(v34).UnmarshalEasyJSON(in)
					out.Bid = append(out.Bid, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seat":
			out.Seat = string(in.String())
		case "group":
			out.Group = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb4(out *jwriter.Writer, in SeatBid) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bid\":")
	if in.Bid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v35, v36 := range in.Bid {
			if v35 > 0 {
				out.RawByte(',')
			}
			(v36).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if in.Seat != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"seat\":")
		out.String(string(in.Seat))
	}
	if in.Group != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"group\":")
		out.Int(int(in.Group))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SeatBid) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeatBid) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SeatBid) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeatBid) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb4(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb5(in *jlexer.Lexer, out *Regs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coppa":
			out.COPPA = int(in.Int())
		case "ext":
			(out.Ext).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb5(out *jwriter.Writer, in Regs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.COPPA != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"coppa\":")
		out.Int(int(in.COPPA))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		(in.Ext).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Regs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Regs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Regs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Regs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb5(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb6(in *jlexer.Lexer, out *Publisher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "cat":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cat).UnmarshalJSON(data))
			}
		case "domain":
			out.Domain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb6(out *jwriter.Writer, in Publisher) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		out.Raw((in.Cat).MarshalJSON())
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Publisher) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Publisher) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Publisher) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Publisher) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb6(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb7(in *jlexer.Lexer, out *Producer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cat).UnmarshalJSON(data))
			}
		case "domain":
			out.Domain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb7(out *jwriter.Writer, in Producer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		out.Raw((in.Cat).MarshalJSON())
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Producer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Producer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Producer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Producer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb7(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb8(in *jlexer.Lexer, out *Pmp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "private_auction":
			out.PrivateAuction = int(in.Int())
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if out.Deals == nil {
					if !in.IsDelim(']') {
						out.Deals = make([]Deal, 0, 1)
					} else {
						out.Deals = []Deal{}
					}
				} else {
					out.Deals = (out.Deals)[:0]
				}
				for !in.IsDelim(']') {
					var v37 Deal
					(v37).UnmarshalEasyJSON(in)
					out.Deals = append(out.Deals, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb8(out *jwriter.Writer, in Pmp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PrivateAuction != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"private_auction\":")
		out.Int(int(in.PrivateAuction))
	}
	if len(in.Deals) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deals\":")
		if in.Deals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Deals {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pmp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pmp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pmp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pmp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb8(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb9(in *jlexer.Lexer, out *Native) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ver":
			out.Ver = string(in.String())
		case "request":
			out.Request = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb9(out *jwriter.Writer, in Native) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ver\":")
	out.String(string(in.Ver))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"request\":")
	out.String(string(in.Request))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Native) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Native) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Native) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Native) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb9(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb10(in *jlexer.Lexer, out *Imp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(Banner)
				}
				(*out.Banner).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		case "displaymanager":
			out.DisplayManager = string(in.String())
		case "displaymanagerver":
			out.DisplayManagerVer = string(in.String())
		case "instl":
			out.Instl = int(in.Int())
		case "tagid":
			out.TagID = string(in.String())
		case "bidfloor":
			out.BidFloor = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCur = string(in.String())
		case "secure":
			out.Secure = int(in.Int())
		case "iframebuster":
			if in.IsNull() {
				in.Skip()
				out.IframeBuster = nil
			} else {
				in.Delim('[')
				if out.IframeBuster == nil {
					if !in.IsDelim(']') {
						out.IframeBuster = make([]string, 0, 4)
					} else {
						out.IframeBuster = []string{}
					}
				} else {
					out.IframeBuster = (out.IframeBuster)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.IframeBuster = append(out.IframeBuster, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.PMP = nil
			} else {
				if out.PMP == nil {
					out.PMP = new(Pmp)
				}
				(*out.PMP).UnmarshalEasyJSON(in)
			}
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(Native)
				}
				(*out.Native).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb10(out *jwriter.Writer, in Imp) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Raw((in.ID).MarshalJSON())
	if in.Banner != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"banner\":")
		if in.Banner == nil {
			out.RawString("null")
		} else {
			(*in.Banner).MarshalEasyJSON(out)
		}
	}
	if in.Video != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"video\":")
		if in.Video == nil {
			out.RawString("null")
		} else {
			(*in.Video).MarshalEasyJSON(out)
		}
	}
	if in.DisplayManager != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"displaymanager\":")
		out.String(string(in.DisplayManager))
	}
	if in.DisplayManagerVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"displaymanagerver\":")
		out.String(string(in.DisplayManagerVer))
	}
	if in.Instl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instl\":")
		out.Int(int(in.Instl))
	}
	if in.TagID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tagid\":")
		out.String(string(in.TagID))
	}
	if in.BidFloor != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloor\":")
		out.Float64(float64(in.BidFloor))
	}
	if in.BidFloorCur != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloorcur\":")
		out.String(string(in.BidFloorCur))
	}
	if in.Secure != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"secure\":")
		out.Int(int(in.Secure))
	}
	if len(in.IframeBuster) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"iframebuster\":")
		if in.IframeBuster == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.IframeBuster {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if in.PMP != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pmp\":")
		if in.PMP == nil {
			out.RawString("null")
		} else {
			(*in.PMP).MarshalEasyJSON(out)
		}
	}
	if in.Native != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"native\":")
		if in.Native == nil {
			out.RawString("null")
		} else {
			(*in.Native).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Imp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Imp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Imp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Imp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb10(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb11(in *jlexer.Lexer, out *Geo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Lat = float64(in.Float64())
		case "lon":
			out.Lon = float64(in.Float64())
		case "type":
			out.Type = int(in.Int())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "regionfips104":
			out.RegionFIPS104 = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "city":
			out.City = string(in.String())
		case "zip":
			out.Zip = string(in.String())
		case "utcoffset":
			out.UTCOffset = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb11(out *jwriter.Writer, in Geo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lat\":")
		out.Float64(float64(in.Lat))
	}
	if in.Lon != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lon\":")
		out.Float64(float64(in.Lon))
	}
	if in.Type != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"type\":")
		out.Int(int(in.Type))
	}
	if in.Country != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"country\":")
		out.String(string(in.Country))
	}
	if in.Region != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"region\":")
		out.String(string(in.Region))
	}
	if in.RegionFIPS104 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"regionfips104\":")
		out.String(string(in.RegionFIPS104))
	}
	if in.Metro != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metro\":")
		out.String(string(in.Metro))
	}
	if in.City != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"city\":")
		out.String(string(in.City))
	}
	if in.Zip != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"zip\":")
		out.String(string(in.Zip))
	}
	if in.UTCOffset != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"utcoffset\":")
		out.Int(int(in.UTCOffset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Geo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Geo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Geo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Geo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb11(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb12(in *jlexer.Lexer, out *Ext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ra":
			if in.IsNull() {
				in.Skip()
				out.RequestAttributes = nil
			} else {
				in.Delim('[')
				if out.RequestAttributes == nil {
					if !in.IsDelim(']') {
						out.RequestAttributes = make([]int64, 0, 8)
					} else {
						out.RequestAttributes = []int64{}
					}
				} else {
					out.RequestAttributes = (out.RequestAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v43 int64
					v43 = int64(in.Int64())
					out.RequestAttributes = append(out.RequestAttributes, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "consent":
			out.Consent = string(in.String())
		case "gdpr":
			out.GDPR = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb12(out *jwriter.Writer, in Ext) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RequestAttributes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ra\":")
		if in.RequestAttributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.RequestAttributes {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v45))
			}
			out.RawByte(']')
		}
	}
	if in.Consent != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"consent\":")
		out.String(string(in.Consent))
	}
	if in.GDPR != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"gdpr\":")
		out.Int(int(in.GDPR))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb12(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb13(in *jlexer.Lexer, out *DeviceExt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idfa":
			out.IDFA = string(in.String())
		case "gaid":
			out.GAID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb13(out *jwriter.Writer, in DeviceExt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IDFA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"idfa\":")
		out.String(string(in.IDFA))
	}
	if in.GAID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"gaid\":")
		out.String(string(in.GAID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeviceExt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeviceExt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeviceExt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeviceExt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb13(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb14(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ua":
			out.Ua = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				(*out.Geo).UnmarshalEasyJSON(in)
			}
		case "dnt":
			out.Dnt = int(in.Int())
		case "lmt":
			out.Lmt = int(in.Int())
		case "ip":
			out.IP = string(in.String())
		case "ipv6":
			out.IPv6 = string(in.String())
		case "devicetype":
			out.DeviceType = int(in.Int())
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "osv":
			out.OSv = string(in.String())
		case "hwv":
			out.HWv = string(in.String())
		case "h":
			out.H = int(in.Int())
		case "w":
			out.W = int(in.Int())
		case "ppi":
			out.PPI = int(in.Int())
		case "pxratio":
			out.PxRatio = float64(in.Float64())
		case "js":
			out.JS = int(in.Int())
		case "flashver":
			out.FlashVer = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "carrier":
			out.Carrier = string(in.String())
		case "connectiontype":
			out.ConnectionType = int(in.Int())
		case "ifa":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IFA).UnmarshalJSON(data))
			}
		case "didsha1":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DIDSHA1).UnmarshalJSON(data))
			}
		case "didmd5":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DIDMD5).UnmarshalJSON(data))
			}
		case "dpidsha1":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DPIDSHA1).UnmarshalJSON(data))
			}
		case "dpidmd5":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DPIDMD5).UnmarshalJSON(data))
			}
		case "macsha1":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MACSHA1).UnmarshalJSON(data))
			}
		case "macmd5":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MACMD5).UnmarshalJSON(data))
			}
		case "ext":
			(out.Ext).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb14(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ua != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ua\":")
		out.String(string(in.Ua))
	}
	if in.Geo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geo\":")
		if in.Geo == nil {
			out.RawString("null")
		} else {
			(*in.Geo).MarshalEasyJSON(out)
		}
	}
	if in.Dnt != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dnt\":")
		out.Int(int(in.Dnt))
	}
	if in.Lmt != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lmt\":")
		out.Int(int(in.Lmt))
	}
	if in.IP != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ip\":")
		out.String(string(in.IP))
	}
	if in.IPv6 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ipv6\":")
		out.String(string(in.IPv6))
	}
	if in.DeviceType != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"devicetype\":")
		out.Int(int(in.DeviceType))
	}
	if in.Make != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"make\":")
		out.String(string(in.Make))
	}
	if in.Model != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"model\":")
		out.String(string(in.Model))
	}
	if in.OS != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"os\":")
		out.String(string(in.OS))
	}
	if in.OSv != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"osv\":")
		out.String(string(in.OSv))
	}
	if in.HWv != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hwv\":")
		out.String(string(in.HWv))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Int(int(in.H))
	}
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Int(int(in.W))
	}
	if in.PPI != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ppi\":")
		out.Int(int(in.PPI))
	}
	if in.PxRatio != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pxratio\":")
		out.Float64(float64(in.PxRatio))
	}
	if in.JS != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"js\":")
		out.Int(int(in.JS))
	}
	if in.FlashVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"flashver\":")
		out.String(string(in.FlashVer))
	}
	if in.Language != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language\":")
		out.String(string(in.Language))
	}
	if in.Carrier != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"carrier\":")
		out.String(string(in.Carrier))
	}
	if in.ConnectionType != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"connectiontype\":")
		out.Int(int(in.ConnectionType))
	}
	if len(in.IFA) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ifa\":")
		out.Raw((in.IFA).MarshalJSON())
	}
	if len(in.DIDSHA1) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"didsha1\":")
		out.Raw((in.DIDSHA1).MarshalJSON())
	}
	if len(in.DIDMD5) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"didmd5\":")
		out.Raw((in.DIDMD5).MarshalJSON())
	}
	if len(in.DPIDSHA1) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dpidsha1\":")
		out.Raw((in.DPIDSHA1).MarshalJSON())
	}
	if len(in.DPIDMD5) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dpidmd5\":")
		out.Raw((in.DPIDMD5).MarshalJSON())
	}
	if len(in.MACSHA1) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macsha1\":")
		out.Raw((in.MACSHA1).MarshalJSON())
	}
	if len(in.MACMD5) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macmd5\":")
		out.Raw((in.MACMD5).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		(in.Ext).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Device) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Device) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb14(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb15(in *jlexer.Lexer, out *Deal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "bidfloor":
			out.BidFloor = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCur = string(in.String())
		case "at":
			out.At = int(in.Int())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.Wseat = nil
			} else {
				in.Delim('[')
				if out.Wseat == nil {
					if !in.IsDelim(']') {
						out.Wseat = make([]string, 0, 4)
					} else {
						out.Wseat = []string{}
					}
				} else {
					out.Wseat = (out.Wseat)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.Wseat = append(out.Wseat, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wadomain":
			if in.IsNull() {
				in.Skip()
				out.Wadomain = nil
			} else {
				in.Delim('[')
				if out.Wadomain == nil {
					if !in.IsDelim(']') {
						out.Wadomain = make([]string, 0, 4)
					} else {
						out.Wadomain = []string{}
					}
				} else {
					out.Wadomain = (out.Wadomain)[:0]
				}
				for !in.IsDelim(']') {
					var v47 string
					v47 = string(in.String())
					out.Wadomain = append(out.Wadomain, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb15(out *jwriter.Writer, in Deal) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if in.BidFloor != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloor\":")
		out.Float64(float64(in.BidFloor))
	}
	if in.BidFloorCur != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloorcur\":")
		out.String(string(in.BidFloorCur))
	}
	if in.At != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"at\":")
		out.Int(int(in.At))
	}
	if len(in.Wseat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wseat\":")
		if in.Wseat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Wseat {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	if len(in.Wadomain) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wadomain\":")
		if in.Wadomain == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Wadomain {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Deal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Deal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Deal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Deal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb15(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb16(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "segment":
			if in.IsNull() {
				in.Skip()
				out.Segment = nil
			} else {
				in.Delim('[')
				if out.Segment == nil {
					if !in.IsDelim(']') {
						out.Segment = make([]Segment, 0, 1)
					} else {
						out.Segment = []Segment{}
					}
				} else {
					out.Segment = (out.Segment)[:0]
				}
				for !in.IsDelim(']') {
					var v52 Segment
					(v52).UnmarshalEasyJSON(in)
					out.Segment = append(out.Segment, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb16(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if len(in.Segment) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"segment\":")
		if in.Segment == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Segment {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb16(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb17(in *jlexer.Lexer, out *Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "episode":
			out.Episode = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "series":
			out.Series = string(in.String())
		case "season":
			out.Season = string(in.String())
		case "producer":
			if in.IsNull() {
				in.Skip()
				out.Producer = nil
			} else {
				if out.Producer == nil {
					out.Producer = new(Producer)
				}
				(*out.Producer).UnmarshalEasyJSON(in)
			}
		case "url":
			out.URL = string(in.String())
		case "cat":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cat).UnmarshalJSON(data))
			}
		case "videoquality":
			out.VideoQuality = int(in.Int())
		case "context":
			out.Context = int(in.Int())
		case "contentrating":
			out.ContentRating = string(in.String())
		case "userrating":
			out.UserRating = string(in.String())
		case "qagmediarating":
			out.QAGMediaRating = int(in.Int())
		case "keywords":
			out.Keywords = string(in.String())
		case "livestream":
			out.LiveStream = int(in.Int())
		case "sourcerelationship":
			out.SourceRelationship = int(in.Int())
		case "len":
			out.Len = int(in.Int())
		case "language":
			out.Language = string(in.String())
		case "embeddable":
			out.Embeddable = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb17(out *jwriter.Writer, in Content) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if in.Episode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"episode\":")
		out.Int(int(in.Episode))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if in.Series != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"series\":")
		out.String(string(in.Series))
	}
	if in.Season != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"season\":")
		out.String(string(in.Season))
	}
	if in.Producer != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"producer\":")
		if in.Producer == nil {
			out.RawString("null")
		} else {
			(*in.Producer).MarshalEasyJSON(out)
		}
	}
	if in.URL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"url\":")
		out.String(string(in.URL))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		out.Raw((in.Cat).MarshalJSON())
	}
	if in.VideoQuality != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"videoquality\":")
		out.Int(int(in.VideoQuality))
	}
	if in.Context != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"context\":")
		out.Int(int(in.Context))
	}
	if in.ContentRating != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contentrating\":")
		out.String(string(in.ContentRating))
	}
	if in.UserRating != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"userrating\":")
		out.String(string(in.UserRating))
	}
	if in.QAGMediaRating != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"qagmediarating\":")
		out.Int(int(in.QAGMediaRating))
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if in.LiveStream != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"livestream\":")
		out.Int(int(in.LiveStream))
	}
	if in.SourceRelationship != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sourcerelationship\":")
		out.Int(int(in.SourceRelationship))
	}
	if in.Len != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"len\":")
		out.Int(int(in.Len))
	}
	if in.Language != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language\":")
		out.String(string(in.Language))
	}
	if in.Embeddable != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"embeddable\":")
		out.Int(int(in.Embeddable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Content) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Content) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Content) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Content) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb17(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb18(in *jlexer.Lexer, out *BidResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "seatbid":
			if in.IsNull() {
				in.Skip()
				out.SeatBid = nil
			} else {
				in.Delim('[')
				if out.SeatBid == nil {
					if !in.IsDelim(']') {
						out.SeatBid = make([]SeatBid, 0, 1)
					} else {
						out.SeatBid = []SeatBid{}
					}
				} else {
					out.SeatBid = (out.SeatBid)[:0]
				}
				for !in.IsDelim(']') {
					var v55 SeatBid
					(v55).UnmarshalEasyJSON(in)
					out.SeatBid = append(out.SeatBid, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidid":
			out.BidID = string(in.String())
		case "cur":
			out.Cur = string(in.String())
		case "customdata":
			out.CustomData = string(in.String())
		case "nbr":
			out.NBR = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb18(out *jwriter.Writer, in BidResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Raw((in.ID).MarshalJSON())
	if len(in.SeatBid) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"seatbid\":")
		if in.SeatBid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.SeatBid {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.BidID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidid\":")
		out.String(string(in.BidID))
	}
	if in.Cur != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cur\":")
		out.String(string(in.Cur))
	}
	if in.CustomData != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customdata\":")
		out.String(string(in.CustomData))
	}
	if in.NBR != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"nbr\":")
		out.Int(int(in.NBR))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb18(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb19(in *jlexer.Lexer, out *BidRequestExtUdi) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idfa":
			out.IDFA = string(in.String())
		case "gaid":
			out.GAID = string(in.String())
		case "googleadid":
			out.GoogleAdID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb19(out *jwriter.Writer, in BidRequestExtUdi) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IDFA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"idfa\":")
		out.String(string(in.IDFA))
	}
	if in.GAID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"gaid\":")
		out.String(string(in.GAID))
	}
	if in.GoogleAdID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"googleadid\":")
		out.String(string(in.GoogleAdID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequestExtUdi) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequestExtUdi) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequestExtUdi) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequestExtUdi) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb19(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb20(in *jlexer.Lexer, out *BidRequestExt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "udi":
			(out.Udi).UnmarshalEasyJSON(in)
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb20(out *jwriter.Writer, in BidRequestExt) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"udi\":")
		(in.Udi).MarshalEasyJSON(out)
	}
	if in.RemoteAddr != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"remote_addr\":")
		out.String(string(in.RemoteAddr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequestExt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequestExt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequestExt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequestExt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb20(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb21(in *jlexer.Lexer, out *BidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "imp":
			if in.IsNull() {
				in.Skip()
				out.Imp = nil
			} else {
				in.Delim('[')
				if out.Imp == nil {
					if !in.IsDelim(']') {
						out.Imp = make([]Imp, 0, 1)
					} else {
						out.Imp = []Imp{}
					}
				} else {
					out.Imp = (out.Imp)[:0]
				}
				for !in.IsDelim(']') {
					var v58 Imp
					(v58).UnmarshalEasyJSON(in)
					out.Imp = append(out.Imp, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "site":
			if in.IsNull() {
				in.Skip()
				out.Site = nil
			} else {
				if out.Site == nil {
					out.Site = new(Site)
				}
				(*out.Site).UnmarshalEasyJSON(in)
			}
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(App)
				}
				(*out.App).UnmarshalEasyJSON(in)
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				(*out.Device).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "test":
			out.Test = int(in.Int())
		case "at":
			out.At = int(in.Int())
		case "tmax":
			out.Tmax = int(in.Int())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.Wseat = nil
			} else {
				in.Delim('[')
				if out.Wseat == nil {
					if !in.IsDelim(']') {
						out.Wseat = make([]string, 0, 4)
					} else {
						out.Wseat = []string{}
					}
				} else {
					out.Wseat = (out.Wseat)[:0]
				}
				for !in.IsDelim(']') {
					var v59 string
					v59 = string(in.String())
					out.Wseat = append(out.Wseat, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allimps":
			out.AllImps = int(in.Int())
		case "cur":
			if in.IsNull() {
				in.Skip()
				out.Cur = nil
			} else {
				in.Delim('[')
				if out.Cur == nil {
					if !in.IsDelim(']') {
						out.Cur = make([]string, 0, 4)
					} else {
						out.Cur = []string{}
					}
				} else {
					out.Cur = (out.Cur)[:0]
				}
				for !in.IsDelim(']') {
					var v60 string
					v60 = string(in.String())
					out.Cur = append(out.Cur, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bcat":
			if in.IsNull() {
				in.Skip()
				out.Bcat = nil
			} else {
				in.Delim('[')
				if out.Bcat == nil {
					if !in.IsDelim(']') {
						out.Bcat = make([]string, 0, 4)
					} else {
						out.Bcat = []string{}
					}
				} else {
					out.Bcat = (out.Bcat)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.Bcat = append(out.Bcat, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "badv":
			if in.IsNull() {
				in.Skip()
				out.Badv = nil
			} else {
				in.Delim('[')
				if out.Badv == nil {
					if !in.IsDelim(']') {
						out.Badv = make([]string, 0, 4)
					} else {
						out.Badv = []string{}
					}
				} else {
					out.Badv = (out.Badv)[:0]
				}
				for !in.IsDelim(']') {
					var v62 string
					v62 = string(in.String())
					out.Badv = append(out.Badv, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "regs":
			if in.IsNull() {
				in.Skip()
				out.Regs = nil
			} else {
				if out.Regs == nil {
					out.Regs = new(Regs)
				}
				(*out.Regs).UnmarshalEasyJSON(in)
			}
		case "ext":
			(out.Ext).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb21(out *jwriter.Writer, in BidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Raw((in.ID).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"imp\":")
	if in.Imp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v63, v64 := range in.Imp {
			if v63 > 0 {
				out.RawByte(',')
			}
			(v64).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if in.Site != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"site\":")
		if in.Site == nil {
			out.RawString("null")
		} else {
			(*in.Site).MarshalEasyJSON(out)
		}
	}
	if in.App != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"app\":")
		if in.App == nil {
			out.RawString("null")
		} else {
			(*in.App).MarshalEasyJSON(out)
		}
	}
	if in.Device != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"device\":")
		if in.Device == nil {
			out.RawString("null")
		} else {
			(*in.Device).MarshalEasyJSON(out)
		}
	}
	if in.User != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"user\":")
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	if in.Test != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"test\":")
		out.Int(int(in.Test))
	}
	if in.At != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"at\":")
		out.Int(int(in.At))
	}
	if in.Tmax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tmax\":")
		out.Int(int(in.Tmax))
	}
	if len(in.Wseat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wseat\":")
		if in.Wseat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Wseat {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	if in.AllImps != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"allimps\":")
		out.Int(int(in.AllImps))
	}
	if len(in.Cur) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cur\":")
		if in.Cur == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v67, v68 := range in.Cur {
				if v67 > 0 {
					out.RawByte(',')
				}
				out.String(string(v68))
			}
			out.RawByte(']')
		}
	}
	if len(in.Bcat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bcat\":")
		if in.Bcat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v69, v70 := range in.Bcat {
				if v69 > 0 {
					out.RawByte(',')
				}
				out.String(string(v70))
			}
			out.RawByte(']')
		}
	}
	if len(in.Badv) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"badv\":")
		if in.Badv == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.Badv {
				if v71 > 0 {
					out.RawByte(',')
				}
				out.String(string(v72))
			}
			out.RawByte(']')
		}
	}
	if in.Regs != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"regs\":")
		if in.Regs == nil {
			out.RawString("null")
		} else {
			(*in.Regs).MarshalEasyJSON(out)
		}
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		(in.Ext).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb21(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb22(in *jlexer.Lexer, out *Bid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "impid":
			out.ImpID = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "adid":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AdID).UnmarshalJSON(data))
			}
		case "nurl":
			out.NURL = string(in.String())
		case "adm":
			out.Adm = string(in.String())
		case "adomain":
			if in.IsNull() {
				in.Skip()
				out.Adomain = nil
			} else {
				in.Delim('[')
				if out.Adomain == nil {
					if !in.IsDelim(']') {
						out.Adomain = make([]string, 0, 4)
					} else {
						out.Adomain = []string{}
					}
				} else {
					out.Adomain = (out.Adomain)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.Adomain = append(out.Adomain, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bundle":
			out.Bundle = string(in.String())
		case "iurl":
			out.IURL = string(in.String())
		case "cid":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CID).UnmarshalJSON(data))
			}
		case "crid":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CrID).UnmarshalJSON(data))
			}
		case "cat":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cat).UnmarshalJSON(data))
			}
		case "attr":
			if in.IsNull() {
				in.Skip()
				out.Attr = nil
			} else {
				in.Delim('[')
				if out.Attr == nil {
					if !in.IsDelim(']') {
						out.Attr = make([]int, 0, 8)
					} else {
						out.Attr = []int{}
					}
				} else {
					out.Attr = (out.Attr)[:0]
				}
				for !in.IsDelim(']') {
					var v74 int
					v74 = int(in.Int())
					out.Attr = append(out.Attr, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deal_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DealID).UnmarshalJSON(data))
			}
		case "h":
			out.H = int(in.Int())
		case "w":
			out.W = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb22(out *jwriter.Writer, in Bid) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Raw((in.ID).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"impid\":")
	out.String(string(in.ImpID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"price\":")
	out.Float64(float64(in.Price))
	if in.AdID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"adid\":")
		out.Raw((in.AdID).MarshalJSON())
	}
	if in.NURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"nurl\":")
		out.String(string(in.NURL))
	}
	if in.Adm != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"adm\":")
		out.String(string(in.Adm))
	}
	if len(in.Adomain) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"adomain\":")
		if in.Adomain == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v75, v76 := range in.Adomain {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.String(string(v76))
			}
			out.RawByte(']')
		}
	}
	if in.Bundle != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bundle\":")
		out.String(string(in.Bundle))
	}
	if in.IURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"iurl\":")
		out.String(string(in.IURL))
	}
	if in.CID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cid\":")
		out.Raw((in.CID).MarshalJSON())
	}
	if in.CrID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"crid\":")
		out.Raw((in.CrID).MarshalJSON())
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		out.Raw((in.Cat).MarshalJSON())
	}
	if len(in.Attr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"attr\":")
		if in.Attr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Attr {
				if v77 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v78))
			}
			out.RawByte(']')
		}
	}
	if in.DealID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deal_id\":")
		out.Raw((in.DealID).MarshalJSON())
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Int(int(in.H))
	}
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Int(int(in.W))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bid) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bid) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bid) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bid) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb22(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb23(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "wmax":
			out.Wmax = int(in.Int())
		case "hmax":
			out.Hmax = int(in.Int())
		case "wmin":
			out.Wmin = int(in.Int())
		case "hmin":
			out.Hmin = int(in.Int())
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "btype":
			if in.IsNull() {
				in.Skip()
				out.Btype = nil
			} else {
				in.Delim('[')
				if out.Btype == nil {
					if !in.IsDelim(']') {
						out.Btype = make([]int, 0, 8)
					} else {
						out.Btype = []int{}
					}
				} else {
					out.Btype = (out.Btype)[:0]
				}
				for !in.IsDelim(']') {
					var v79 int
					v79 = int(in.Int())
					out.Btype = append(out.Btype, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.Battr = nil
			} else {
				in.Delim('[')
				if out.Battr == nil {
					if !in.IsDelim(']') {
						out.Battr = make([]int, 0, 8)
					} else {
						out.Battr = []int{}
					}
				} else {
					out.Battr = (out.Battr)[:0]
				}
				for !in.IsDelim(']') {
					var v80 int
					v80 = int(in.Int())
					out.Battr = append(out.Battr, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Pos = int(in.Int())
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v81 string
					v81 = string(in.String())
					out.Mimes = append(out.Mimes, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topframe":
			out.TopFrame = int(in.Int())
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.ExpDir = nil
			} else {
				in.Delim('[')
				if out.ExpDir == nil {
					if !in.IsDelim(']') {
						out.ExpDir = make([]int, 0, 8)
					} else {
						out.ExpDir = []int{}
					}
				} else {
					out.ExpDir = (out.ExpDir)[:0]
				}
				for !in.IsDelim(']') {
					var v82 int
					v82 = int(in.Int())
					out.ExpDir = append(out.ExpDir, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]int, 0, 8)
					} else {
						out.API = []int{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v83 int
					v83 = int(in.Int())
					out.API = append(out.API, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb23(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"w\":")
	out.Int(int(in.W))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"h\":")
	out.Int(int(in.H))
	if in.Wmax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wmax\":")
		out.Int(int(in.Wmax))
	}
	if in.Hmax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hmax\":")
		out.Int(int(in.Hmax))
	}
	if in.Wmin != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wmin\":")
		out.Int(int(in.Wmin))
	}
	if in.Hmin != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hmin\":")
		out.Int(int(in.Hmin))
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if len(in.Btype) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"btype\":")
		if in.Btype == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.Btype {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v85))
			}
			out.RawByte(']')
		}
	}
	if len(in.Battr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"battr\":")
		if in.Battr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.Battr {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v87))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pos\":")
		out.Int(int(in.Pos))
	}
	if len(in.Mimes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mimes\":")
		if in.Mimes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v88, v89 := range in.Mimes {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.String(string(v89))
			}
			out.RawByte(']')
		}
	}
	if in.TopFrame != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"topframe\":")
		out.Int(int(in.TopFrame))
	}
	if len(in.ExpDir) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"expdir\":")
		if in.ExpDir == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v90, v91 := range in.ExpDir {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v91))
			}
			out.RawByte(']')
		}
	}
	if len(in.API) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"api\":")
		if in.API == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.API {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v93))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Banner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Banner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Banner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Banner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb23(l, v)
}
func easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb24(in *jlexer.Lexer, out *App) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "bundle":
			out.Bundle = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "storeurl":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StoreURL).UnmarshalJSON(data))
			}
		case "cat":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cat).UnmarshalJSON(data))
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if out.SectionCat == nil {
					if !in.IsDelim(']') {
						out.SectionCat = make([]string, 0, 4)
					} else {
						out.SectionCat = []string{}
					}
				} else {
					out.SectionCat = (out.SectionCat)[:0]
				}
				for !in.IsDelim(']') {
					var v94 string
					v94 = string(in.String())
					out.SectionCat = append(out.SectionCat, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if out.PageCat == nil {
					if !in.IsDelim(']') {
						out.PageCat = make([]string, 0, 4)
					} else {
						out.PageCat = []string{}
					}
				} else {
					out.PageCat = (out.PageCat)[:0]
				}
				for !in.IsDelim(']') {
					var v95 string
					v95 = string(in.String())
					out.PageCat = append(out.PageCat, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ver":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ver).UnmarshalJSON(data))
			}
		case "privacypolicy":
			out.PrivacyPolicy = int(in.Int())
		case "paid":
			out.Paid = int(in.Int())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				(*out.Publisher).UnmarshalEasyJSON(in)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				(*out.Content).UnmarshalEasyJSON(in)
			}
		case "keywords":
			out.Keywords = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb24(out *jwriter.Writer, in App) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Raw((in.ID).MarshalJSON())
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Bundle != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bundle\":")
		out.String(string(in.Bundle))
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if len(in.StoreURL) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"storeurl\":")
		out.Raw((in.StoreURL).MarshalJSON())
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		out.Raw((in.Cat).MarshalJSON())
	}
	if len(in.SectionCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sectioncat\":")
		if in.SectionCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v96, v97 := range in.SectionCat {
				if v96 > 0 {
					out.RawByte(',')
				}
				out.String(string(v97))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pagecat\":")
		if in.PageCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v98, v99 := range in.PageCat {
				if v98 > 0 {
					out.RawByte(',')
				}
				out.String(string(v99))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ver) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ver\":")
		out.Raw((in.Ver).MarshalJSON())
	}
	if in.PrivacyPolicy != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"privacypolicy\":")
		out.Int(int(in.PrivacyPolicy))
	}
	if in.Paid != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"paid\":")
		out.Int(int(in.Paid))
	}
	if in.Publisher != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"publisher\":")
		if in.Publisher == nil {
			out.RawString("null")
		} else {
			(*in.Publisher).MarshalEasyJSON(out)
		}
	}
	if in.Content != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"content\":")
		if in.Content == nil {
			out.RawString("null")
		} else {
			(*in.Content).MarshalEasyJSON(out)
		}
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v App) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v App) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComAtomxCoreOpenrtb24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *App) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *App) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComAtomxCoreOpenrtb24(l, v)
}
